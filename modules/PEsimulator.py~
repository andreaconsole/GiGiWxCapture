#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# RonchiGiGiCalc.py: entry point of RonchiGiGiCalc
#
###############################################################################
###
### This file is part of RonchiGiGiCalc.
###
###    Copyright (C) 2011 Andrea Console  <andreaconsole@gmail.com>
###
###    This program is free software: you can redistribute it and/or modify
###    it under the terms of the GNU General Public License as published by
###    the Free Software Foundation, either version 3 of the License, or
###    (at your option) any later version.
###
###    This program is distributed in the hope that it will be useful,
###    but WITHOUT ANY WARRANTY; without even the implied warranty of
###    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
###    GNU General Public License for more details.
###
###    You should have received a copy of the GNU General Public License
###    along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
###    If you find any part of this code useful and suitable for any software
###    developed by you, I would appreciate if you mentioned me in your code.
###
################################################################################

import os
import wx
import math
sqrt = math.sqrt
sin = math.sin
cos = math.cos
tan = math.tan
atan = math.atan
pi = math.pi
atan2 = math.atan2
hypot = math.hypot
import random
 
class Panel1(wx.Panel):
    """class Panel1 creates a panel with an image on it, inherits wx.Panel"""
    def __init__(self, parent):
        # create the panel
        wx.Panel.__init__(self, parent)
        try:
            # pick an image file you have in the working folder
            # you can load .jpg  .png  .bmp  or .gif files
            image_file = './star.jpg'
            bmp1 = wx.Image(image_file, wx.BITMAP_TYPE_ANY).ConvertToBitmap()
            # image's upper left corner anchors at panel coordinates (0, 0)
            self.bitmap1 = wx.StaticBitmap(self, -1, bmp1, (0, 0))
            # show some image details
            str1 = "%s  %dx%d" % (image_file, bmp1.GetWidth(), bmp1.GetHeight()) 
            parent.SetTitle(str1)
        except IOError:
            print "Image file %s not found" % image_file
            raise SystemExit
        
    
        
class Controls(object):
    def __init__(self,parent):
        self.frame1 = wx.Frame(None, -1, "An image on a panel", size=(500, 500))
        # create the class instance
        self.panel1 = Panel1(self.frame1) 
        self.frame1.Show(True)
        self.drawClock = wx.Timer(self.frame1)
        self.drawClock.Start(100)
        self.frame1.Bind(wx.EVT_TIMER, self.DrawClock, self.drawClock)
        self.ARcounter = 0
        self.DECcounter = 0
        self.ARdrift = 0.0
        self.DECdrift = 0.0
        self.ARint = 0
        self.DECint = 0
        self.ARtrack = 0.0
        self.DECtrack = 0.0
        #---------------------------------------------------
        self.angolo =   45    *(-3.1415/180)#unit = degree
        self.ARspeed = 1      /10.0 #unit = pixel/sec
        self.DECspeed = 1     /10.0 #unit = pixel/sec
        print self.angolo, self.ARspeed, self.DECspeed
        self.ARmaxDrift = 2      #unit = pixel
        self.ARminInt = 2000     #unit = sec
        self.ARmaxInt = 10000    #unit = sec
        
        self.DECmaxDrift = 20    #unit = pixel
        self.DECminInt = 20000       #unit = sec
        self.DECmaxInt = 1000000      #unit = sec
        #--------------------------------------------------
        
        
        
    def DrawClock(self, evt):
        self.ARcounter += 1
        self.DECcounter += 1
        if self.ARcounter >= self.ARint:
            self.ARcounter = 0
            self.ARdrift = float(random.randrange(1,self.ARmaxDrift))
            self.ARint = 10*random.randrange(self.ARminInt,self.ARmaxInt)
            print "AR max drift: ", self.ARdrift, "; AR drift time: ", self.ARint
        if self.DECcounter >= self.DECint:
            self.DECcounter = 0
            self.DECdrift = float(random.randrange(1,self.DECmaxDrift))
            self.DECint = 10*random.randrange(self.DECminInt,self.DECmaxInt)
            print "DEC max drift: ", self.DECdrift, "; DEC drift time: ", self.DECint
        
        if (os.path.exists('W')): self.ARtrack -= self.ARspeed
        if (os.path.exists('E')): self.ARtrack += self.ARspeed
        if (os.path.exists('N')): self.DECtrack += self.DECspeed
        if (os.path.exists('S')): self.DECtrack -= self.DECspeed
        
        
        AR = self.ARtrack + (self.ARdrift * sin(6.28*self.ARcounter/self.ARint))
        DEC = self.DECtrack + (self.DECdrift * sin(6.28*self.DECcounter/self.DECint))
        #print self.DECtrack, self.DECspeed
        
        x = round(AR * cos(self.angolo) - DEC * sin(self.angolo))
        y = round(AR * sin(self.angolo) + DEC * cos(self.angolo))
        self.panel1.bitmap1.SetPosition((x,y))
        

app = wx.App()
controls = Controls(app)
app.MainLoop()
